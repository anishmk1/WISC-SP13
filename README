Some information regarding my processor implementation:

For branch and jump instructions: The branch/jump decision is made in the Decode stage using equality tests of reg1data produced in Decode itself. 
If a branch is taken a flush signal is sent back through the fd register to zero the instruction currently in fetch (it feeds into the control unit
and zeros all the relevant control signals).
In the case of Jr and Jalr instructions however the actual address is only available at the end of the Execute stage so I had to send a flush_second signal
through the dx AND the fd register to flush the next instruction as well creating effectively a 2 cycle penalty.

For load instructions I had to implement a one cycle stall if the next instr depended on the writereg of the load. I commented out this section in hazard.v
however since it was causing problems and not properly implemented.

Data forwarding: I have implemented Ex/MEM to alu and MEM/WB to alu forwarding. I also have forwarding for my branch decision logic since it occurs even 
earlier => in Decode stage so the dependency checks were slightly different. 
As far as I can tell my forwarding is one thing that seems to be working correctly since I'm able to pass majority of the simpel tests that have dependencies.
I also slightly modified my register file to output the writedata directly in the case of a Writeback and Decode register overlap (which should normally not be a problem since the register file should write before read in a clock cycle).

I made a dff_instr module which i use to store the instruction in fd and which resets to NOP rather than HALT. I know this is not allowed but I 
planned to finish my pipeline design first and then worry about fixing it but that never happened and I'm too scared to try and fix it now.